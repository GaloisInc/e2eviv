# Outline

1. introduction (15s)
    - recently re-examining voting systems
    - lured by promise of low cost, high accuracy counting using computers
    - one proposal is vote-by-email: email a PDF to voter, he emails a PDF back
2. promised features (10s)
    - remote voting
    - accessibility
    - low administrative overhead
        - few poll workers/locations needed
        - low hardware/software cost compared to other evoting systems
    - machine counting
    - fast, reliable ballot delivery and receipt
    - flexibility (e.g. personalized ballots)
3. possible vulnerabilities/expanded architecture diagram (30s)
    - email from government to voter passes along untrusted links
        - possible DOS attack
        - ballot could be copied or diverted to attacker to place replacement vote
        - forward on a modified PDF -- e.g. one with modified party descriptions, misidentified radio buttons, etc.
        - untrusted links include ones administered by experts, but also ones administered by non-experts
    - once on the user's computer, vote is cast on untrusted hardware with untrusted software
        - compromised PDF reader/writer could display/record vote incorrectly
        - compromised email program or operating system could modify votes
    - email from voter to government again passes along untrusted links
        - voter's choices visible to attacker
        - all same attacks as on the way in, but now more reliably attack people who are voting the "wrong" way
    - no real way to audit that these things didn't go wrong, either
4. our hack (20s)
    - description
        - voter sends in intended vote... but government receives something different!
        - contact home routers with default password
        - patch the software on the router to rewrite email attachments
        - looks for a specific vote, replace it with another specific vote
        - essentially invisible: patched software is, to all outward appearances, identical to the factory default software
    - ease of development: took two people two days [get the real data to put here] from inception to execution
    - failing mitigations
        - things that require more technical expertise/coordination than can be expected of the general public
            - end-to-end encrypted email connections
            - use digital signatures on the votes
            - harden all routers... and all hardware on the Internet
        - use encrypted PDFs (but still vulnerable to compromised software on voter's computer)
        - try to detect malfunctioning hardware (an unwinnable arms race)
5. conclusion (5s)
    - serious, easily-exploitable problems with vote-by-email
    - now watch it in action

# Transcript

[comment]: # (timings for each paragraph (in seconds): 25, 45, 55, 39, 62, 15)
[comment]: # (total runtime 4:00.38)

Many governments have recently expressed interest in re-examining their voting
systems, lured in part by the promise of low-cost, high-accuracy automated vote
counting. One simple proposal under consideration is vote by email, in which
the government sends each voter a PDF ballot by email. Voters click buttons in
the PDF, save their progress, and send their vote back to the government by
email.

There is a lot to like about this system. It allows remote voting, and compared
to postal mail, email is a fast and relatively reliable delivery mechanism.
Because vote counting can be automated, there is hope that this can be achieved
with low error rates. The system is based on widely-deployed technology, so it
promises low hardware and software costs compared to other evoting systems.
There is no need for polling space reservations or poll workers. The system
also offers a great deal of flexibility: voters may vote when they like;
disabled voters may use customized computing systems; and governments can
personalize the ballots they send out by precinct or any other criteria.

Unfortunately, the system also has serious security flaws. Let's follow a PDF
through its typical voting lifecycle. First, it's generated by the government
and passed off to an email program to be delivered to the voter. The email,
including the PDF, is then sent along some route on the Internet that includes
many potentially untrusted servers. Eventually, the email reaches the voter's
service provider; when the voter checks their email the next time, it passes
through their router to their email program, which displays the email to the
user. The user then runs their PDF reader and writer to modify the PDF, and
hands the PDF off to their email program to be delivered to the government.
Then the same route is followed in reverse: through their router to the service
provider, across untrusted links, and finally back to a receiving email program
at the government's end.

If an attacker can compromise any part of this chain -- the government's
computers, the untrusted links on the network, the router in the voter's home
network, or the operating system, email program, or PDF reader on the voter's
computer -- they can influence the outcome of the voting experience. Attacks
can include preventing the vote from ever arriving at the intended recipient
(perhaps diverting it so that the attacker may cast their vote instead);
modifying the ballot to misrepresent the meaning of the buttons in the PDF, or
displaying the PDF differently than intended; and even modifying the vote the
user has cast.

These attacks are not just theoretical! We have showed that we can connect to
routers in home networks and update the software running on them to modify
votes in PDF email attachments. The attack is very difficult to detect; to all
outward appearances, the corrupted software is identical to the factory-default
software, except that some emails get silently rewritten as they travel from
the voter's computer onto the wider Internet. The end result is that the voter
sends in their intended vote, but the government receives something different!
And doing this is not even hard: from inception to execution, this idea took
two people two days to develop. The obvious mitigations -- using encrypted
email connections, encrypted PDFs, digitally signing votes, or hardening
network equipment -- generally require more technical sophistication or
widespread coordination than can really be expected; and trying to detect
malfunctioning hardware in this scheme is an unwinnable arms race.

There are simply too many untrusted, unverifiable, insecure links in the chain
of voting for it to hold its weight. As attractive as it is, voting by email in
this way is deeply flawed.

Stay tuned to see a demonstration!
